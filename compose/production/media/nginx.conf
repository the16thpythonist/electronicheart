user              www-data;
worker_processes  4;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

  include /etc/nginx/mime.types;
  # default_type application/octet-stream;

  map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

  server {
    client_max_body_size 50M;

    # ~ LISTENING HTTP PORT 80
    # Usually one would assume that we have to set an esoteric port here because we are already using all the standard
    # ports for the actual django server, matomo service etc. but this media nginx service will run internally as a
    # docker container of its own and there it can use whatever port it wants still. The esoteric port will only be
    # needed in the traefik config, which will actually be the first layer to accept external incoming requests for the
    # server. This also means that here in this nginx config we do not have to worry about https! This is also already
    # handled by traefik.
    listen 80;
    # Stupidly, this line is absolutely necessary to support responding to IPv6 requests
    listen [::]:80;

    # ~ PASSWORD PROTECTION
    # So here is the basic issue: Technically, this is a completely separate service from the main django server.
    # Whenever a user wants to upload something this means that django has to send a HTTP POST request to this separate
    # file server to upload the file. Now if this would be completely unprotected whatsoever, everyone could upload any
    # junk to this media server by just sending POST requests! This is a huge security problem. Thus we need at least
    # a password to make sure only the django server can do this. HTTP BASIC authentication is not the best for this,
    # sure, but at this point it is better than nothing.

    # The password file "django.passwd" is being created during the build process of the container by using the
    # "htpasswd" command, where the username and the password are being derived from the production environment
    # variables
    auth_basic_user_file  /www/django.passwd;
    set $auth_basic off;

    add_header Strict-Transport-Security "max-age=0;";

    location /media/ {
      root /www/;

      #dav_methods PUT DELETE;
      autoindex off;

      # Heres the caveat: We only need the authentication for modifying requests such as POST and DELETE for simple
      # GET requests we absolutely dont want the auth! These files should be freely accessible from a browser!
      if ( $request_method = POST ) {
        set $auth_basic Restricted;
      }

      if ( $request_method = DELETE ) {
        set $auth_basic Restricted;
      }

      auth_basic $auth_basic;

    }
  }

}
